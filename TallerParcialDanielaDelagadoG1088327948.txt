Desarrolo de taller parcial
Daniela Delgado Galeano
CC:1088327948

1) 

SISD (SINGLE INSTRUCTION SINGLE DATA):(sola instruccion, los datos individuales) termino que se refiere a una arquitectura de ordenador 
en el que un unico procesador ejecuta una secuencia de instrucciones estos cdispositvos se utilizan en microoprocesadores.

SIMD((SINGLE INSTRUCTION MULTIPLE DATA): se le conoce como un arreglo de procesadores teniendo multiples procesadores que ejecutan la secuencia.

MIMD(MULTIPLE INSTRUCTION MULTIPLE DATA): es un sistema con un flujo de multiples instrucciones que operan sobre los datos estos dispositvos se ultilizan en la arquitectura de sistemas aereos.

MISD(MULTIPLE INSTRUCTION SINGLE DATA): es un tipo de arquitectura de computacion paralela donde muchas unidades funcionales utilizan diferentes operaciones en los mismo datos estos diporistivos se utlizan en la arquitectura de sistemas distribuidos.
-----------------------------------------------------------------------------------------------------------

2) Diga cuales son los 4 principios de diseño.

* La simplicidad favorece la regularidad
* Entre más pequeño es más rápido
* Hacer el caso común más rápido
* Buenos diseños demandan grandes compromisos
-----------------------------------------------------------------------------------------------------------

3) Explique los tres formatos de instrucciones principales existentes en la arquitectura SPARCV8.

-FORMATO #1 Lo utilizan las instrucciones de CALL
 OP    disp30

FORMATO #2 Lo utilizan las instrucciones SETHI y BRANCH (Bicc,FBfcc,CBcc)

*OP  a   COND  OP2    disp22
*OP  RD  OP2   imm22

FORMATO #3 Lo utilizan las instrucciones memory instructions,arithmetic.logical,shnct and remaining

*OP  RD  OP3   RS1  i   UNSUED/ZERO  RS2
*OP  RD  OP3   RS1  i   UNSUED/ZERO  SHNCT
---------------------------------------------------------------------------------------------------------

4) Explique cómo inicializar un valor grande, que ocupe más de 13 bits, en la arquitectura SPARCV8.}

R) para incializar este tipo de variable se aplica la el complemento A2 que esto ayudara a obtener 
los 22 bits con el fin de utilizar la instruccion SETHI que almacenara siempre los 22 bist.

-----------------------------------------------------------------------------------------------------


5) Como puedo reescribir la instrucción (OR y SUBcc) cuando inicializo y  comparo 2 registros.

R) se rescribe con la instruccion MOV para OR y CMP para SUBCC.

---------------------------------------------------------------------------------------------------
a)

int main(){
int a = 8;
int b = ­16800;
int c = 33;
if((a+b)<=b*32){
c=a+(b*2);
}
else{
return b;
}
return a+c;
}

*Lenguaje ensamblador
R)
asigno registro 
%L0=a
%L1=b
%L2=c 
Ox0000 MOV 8, %L0                           
Ox0004 SETHI -17,%L1
Ox0008 OR 608,%L1
Ox000C MOV 33,%L2
Ox0010 ADD %L0,%L1,%L3
Ox0014 SLL %L0, 32, %L4
Ox0018 CMP %L3,%L4,L3
Ox001C BG a, else
Ox0020 SLL %L1, 2,%L5
Ox0024 ADD %L0,%L5,%L2
Ox0028 BA a EXIT
else   
Ox002C MOV, %L1,O0
Ox0030 ADD %L0,%L2,O1
EXIT nop

*Lenguaje maquina 

direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0000       10   10000  000010  00000  1    0000000010000
direcciones  op   RD     op2     imm22
Ox0004       00   10001  100     1111111111111111101111
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0008       10   10001  00010   10001  1  0001001100000
Ox000C       10   10010  000100  00000  1  0000000100001
Ox0010       10   10011  000000  10000  0  00000000      10001
Ox0014       10   10100  100101  10100  1  0000000100000
Ox0018       10   10011  010100  10011  0  00000000      10100
direcciones  op	    a	  cond	  op2	      disp22		
Ox001C       00     1     1010    010    
direcciones  op    RD     op3     Rs1    i  unusued/zero  Rs2
Ox0020       10    10101  100101  10001  1  0000000000010
Ox0024       10    10010  000000  10000  0  00000000      10101
direcciones  op	    a	  cond	  op2	      disp22
Ox0028       00     1     1000    010
direcciones  op    RD     op3     Rs1    i  unusued/zero  Rs2
Ox002C       10    01100  000010  00000  0  00000000      10001
Ox0030       10    01001  000000  10000  0  00000000      10011
Ox0034       00	 00000	 100	0000000000000000000000	
------------------------------------------------------------------------------


b)
int main(){
int a = 8;
int b = ­10;
if(a!=b){
return c/8;
}
else{
return b;
}
}

R) 
declarion de registros
%L1=a
%L2=b
%L3=C

Ox0000 MOV 8,%L1
Ox0004 MOV -10,%L2
Ox0008 MOV   5 ,%L3
Ox000C CMP %L1, %L2,%L0 
Ox0010 BE a , else
Ox0014 SRL %L3, 8,%L4
Ox0018 MOV %L4,%O1
Ox001C BA a EXIT
else  
Ox0020 MOV %L2, %O2
EXIT nop

Lenguaje maquina 

direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0000	     10  10001	000010	00000   1    0000000001000
Ox0004	     10	 10010	000010	00000	1    1111111111010
Ox0008	     10	 10011	000010	00000	1    0000000000101
Ox000C	     10	 10000  010100	10001	0   00000000	10000
direcciones  op	    a	  cond	  op2	      disp22
Ox0010	     00     1	  0001    010	0000000000000000000011	
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0014       10	 10100	100110	10011	1   0000000001000
Ox0018	     10	 01001	000010	00000	1   00000000	10010
direcciones  op	    a	  cond	  op2	      disp22
Ox001C       00	    1	  1000	  010	0000000000000000000010
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0020	     10	 01010	000010	00000	0   00000000	10001
direcciones  op   RD     op2     imm22
Ox0024       00	 00000	 100	0000000000000000000000	

------------------------------------------------------------------------------------------------------------------

C)
int main(){
int a = ­21180;
return a;
}

declaracion de resgistros
%L0= a
Ox0000 SETHI -21,%L0
Ox0004 OR %L0, 324,%L0
Ox0008 MOV %LO,O0

Lenguaje maquina 

direcciones  op   RD     op2     imm22
Ox0000	     00	 10000	 100	1111111111111111110101
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0004	     10	 10000	 000010	10000	1	0000101000100
Ox0008	     10	 10000	 000010	00000	0    00000000	01000

-----------------------------------------------------------------------------------------------------

d)

int main(){
int a = 6; int b=4;
for(int i=0; i<=3; i++){
c=(a+b)/8;
}
return c;
}

declaracion de registros
%L0=a 
%L1=b
%L2=i

0x0000 MOV 6,%L0
Ox0004 MOV 4,%L1
Ox0008 MOV 0,%L2
for
Ox000C CMP %L2,3,%L6
Ox0010 BG a, else
Ox0014 ADD %L0,%L1,%L4
Ox0018 SRL %L4,8,%L5
Ox001C BA, for
Ox0020 ADD %L0,1,%L0
else
Ox0024 MOV %L4,%O0

Lenguaje maquina 
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0000	     10	 10000	0000100	00000	1   0000000000110
Ox0004	     10	 10001	0000100	00000	1   0000000000100
Ox0008	     10	 10010	0000100	00000	1   0000000000000	
Ox000C	     10	 10110	010100	10010	1   0000000000011
direcciones  op	    a	  cond	  op2	      disp22
Ox0010	     00	    1	  1010	  010	0000000000000000000100
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0014	     10	 10100	000000	10000	0  00000000	10100
Ox0018	     10	 10101	100110	10100	1  00000000	01000
direcciones  op	    a	  cond	  op2	      disp22
Ox001C	     00	    1	  1000	  010	1111111111111111111100
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0020       10  10000   000000  10000  1   0000000000001
Ox0024	     10	 01000	 000010	 00000	0   00000000	10100

--------------------------------------------------------------------------------


8) Convierta el siguiente código a lenguaje de máquina SPARCV8.

int ejemplo(int x, int y, int z){     EJEMPLO
int a;                                SUB %i0,%i1,%i3
a = x ­ y + z*8;                      SLL %i2,8,%i2
return a + 2;                         ADD %i3,%i2,%l1
                                      JMPL %O7,8,%g0
                                      ADD %L1,2,%O0
 

} 

int main(){                            MAIN
int x = 4, y = 2, z = ­128;            MOV 4,%L0
int c= 0;                              MOV 2,%L1
int c = ejemplo(x,y,z);                MOV -128,%L2
return c + 45;                         CALL EJEMPLO
                                       MOV 0,%L0
                                       ADD %L0,45,%O1                          
}


Lenguaje maquina 
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0000	     10	 10001	000010	00000	1    0000000000000
Ox0004	     10	 10010	000010	00000	1    0000000000000
Ox0008	     10	 10011	010100	10010	1  00000000	11001
Ox000C	     10	 00000	111000	01111	1    0000000001000
direcciones  op	    a	  cond	  op2	      disp22
Ox0010	     00	    1	  1010	  010	0000000000000000000011
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0014	     10	100101	000000	10001	0   00000000	11001
direcciones  op	    a	  cond	  op2	      disp22
Ox0018	     00	    1	  1000	  010   0000000000000000000010
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox001C	     10	 10010	000000	10010	1    0000000000001
Ox0020	     10	 00000	111000	01111	1    0000000001000
Ox0024	     10	 00111	000010	00000	0   00000000	10001
Ox0028	     10	 11000	000010	00000	1    0000000000010
Ox002C	     10	 11001	000010	00000	1    0000000000101
direcciones  op  disp30
Ox0030	     01	000000000000000000000000000010110
direcciones  op   RD     op3     Rs1    i  unusued/zero  Rs2
Ox0034	     10	 10000	000010	00000	1    0000000000000
Ox0038	     10	 01001	000010	00000	1   00000000	10000	
------------------------------------------------------------------------------------------
9) Implemente una función mul en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y
lenguaje de máquina SPARCV8 que realice la multiplicación de dos enteros sin signo usando
solo sumas.
a=%i0
   b=%i1 
   resultado=%L0  
   c=%L1
   i=%L2 
                                               MUL
int mul (int a,int b) {                        MOV 0,%L1                      
    int c = 0;                                 MOV 0,%L2
   for  (int  i = 0;  i < b;  i++){             for   
                                               CMP %L2,%I1,%L3
                                               BG a else
            c=c+a;                             ADD %L1,%i1.%L1
            }                                  BA a for
        return c;                              ADD %L2,1%l2
            }                                  else
                                               JMPL %O7,8,%g0
                                               MOV %L1,%O0  
                                  
					        MAIN
int main () {                                   MOV 2,%i0  
   int num=2,                                   MOV 5,%i1
   num2=5,                                      CALL MUL
   resultado=0;                                 MOV 0,%L0
   return resultado;                            MOV %L0,%O1

     
}

direcciones     op       RD     op3      Rs1    i     unusued/zero  Rs2
OX0000	        10	10001	000010	00000	1	0000000000000	
OX0004	        10	10010	000010	00000	1	0000000000000	
OX0008	        10	10011	010100	10010	1	00000000	11001
OX000C	        10	00000	111000	01111	1	0000000001000	
direcciones     op	a	cond	op2	       disp22	
OX0010	        00	1	1010	010	0000000000000000000011		
direcciones     op       RD     op3      Rs1    i     unusued/zero  Rs2
OX0014	        10	100101	000000	10001	0	00000000	11001
direcciones     op	a	cond	op2	       disp22	
OX0018	        00	1	1000	010	1	0000000000010	
direcciones     op       RD     op3      Rs1    i     unusued/zero  Rs2
OX001C	        10	10010	000000	10010	1	0000000000001	
OX0020	        10	00000	111000	01111	1	0000000001000	
OX0024	        10	00111	000010	00000	0	00000000	10001
OX0028	        10	11000	000010	00000	1	0000000000010	
OX002C	        10	11001	000010	00000	1	0000000000101	
direcciones	 op      	disp30					
OX0030	        01	000000000000000000000000000010110					
direcciones     op       RD     op3      Rs1    i     unusued/zero  Rs2
OX0034	        10	10000	000010	00000	1	0000000000000	
OX0038	        10	01001	000010	00000	1	00000000	10000
10) Implemente la función pot en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y
lenguaje de máquina SPARCV8 que realice la potencia de dos números enteros sin signo
realizando llamados a la función desarrollada en el punto 9.


int potencia (int x , int y){
    int i,pot=1;
    if(y==0){
             return 1;
             }
             else{ for(i=1;i<=y;i++){
                   pot= pot*x;
                   }
                   return pot;
                   }
                   }


int main(){
      int p=2, q=2,r=0;
      r=potencia(p,q);
      return r;
      
      }




11) Implemente una función pol en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y
lenguaje de máquina SPARCV8 que calcule un polinomio de grado n, en donde los coeficientes
del polinomio se encuentran almacenados en un vector k de n+1 posiciones, de la siguientes
forma:


12) Implemente una función fact en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y
lenguaje de máquina SPARCV8 que calcule el factorial de un número entero sin signo

13) Implemente una función divint en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y
lenguaje de máquina SPARCV8 que calcule la división entera entre dos números enteros.
